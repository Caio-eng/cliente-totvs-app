// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
// Plus imports for other components in your app.

@use "sass:map";

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single CSS file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$totvs-app-primary: mat.define-palette(mat.$indigo-palette);
$totvs-app-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);


// The warn palette is optional (defaults to red).
$totvs-app-warn: mat.define-palette(mat.$red-palette);

/* Styles to be applied to buttons */
$my-custom-button: mat.define-typography-level(
  $font-family: 'IBM Plex Sans',
  $font-weight: 500,
  $font-size: 1rem,
  $line-height: 1,
  $letter-spacing: 'normal'
);

/* Styles to be applied to input-fields */
$my-custom-input: mat.define-typography-level(
  $font-family: 'IBM Plex Sans',
  $font-weight: 400,
  $font-size: 1rem,
  $line-height: 1,
  $letter-spacing: 'normal',

);

/* Merge custom configs into existing config */
$my-typography-config: map.merge(
  mat.define-typography-config(
    /* 'button'-property will work out of the box */
    $button: $my-custom-button
  ),
  (
    /* 'input'-property will have to be assigned under '@mixin typography' further below */
    'input': $my-custom-input
  )
);

/* Apply custom config */
@include mat.all-component-typographies($my-typography-config);

/* Let's assign the custom property 'input' that we defined above */
@mixin typography($theme) {
  $custom-typography-config: mat.get-typography-config($theme);

  .mat-mdc-form-field {
    @include mat.typography-level($custom-typography-config, 'input');
  }
}

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$totvs-app-theme: mat.define-light-theme((
  color: (
    primary: $totvs-app-primary,
    accent: $totvs-app-accent,
    warn: $totvs-app-warn,
  ),
  typography: $my-typography-config,
));

/* Apply custom app-theme */
@include typography($totvs-app-theme);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($totvs-app-theme);
